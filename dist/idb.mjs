var e={d:(t,r)=>{for(var s in r)e.o(r,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:r[s]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{aZ:()=>o,OP:()=>a,Fj:()=>c,Ay:()=>h,ho:()=>u,rE:()=>r});const r="0.0.1";function s(e){return e.error??e.transaction?.error??new Error("Request failed.")}function n(e){return new Promise(((t,r)=>{e.onsuccess=()=>{t(e.result)},e.onerror=()=>{r(s(e))}}))}class o{name;version;latestError;upgReqs=[];reqs=[];commitRequested=!1;constructor(e){this.name=e}open(e,t){return new Promise(((r,n)=>{const o=indexedDB.open(this.name,this.version);o.onsuccess=()=>{try{r(e(o.result))}catch(e){n(e)}finally{o.result.close()}},o.onerror=()=>{n(s(o))},t&&(o.onupgradeneeded=()=>{t(o.result)})}))}async transaction(e,t,r,s){return t.length?new Promise(((n,o)=>{const i=e.transaction(t,r);i.oncomplete=()=>{n()},i.onerror=()=>{o(i.error??new Error("Transaction failed."))};try{s(i)}catch(e){throw i.abort(),e}})):Promise.resolve()}getVersion(){return this.open((e=>e.version))}async objectStoreNames(){return this.open((e=>e.objectStoreNames))}objectStore(e,t,r){return this.upgReqs.push([e,"create",s=>{if(!s.objectStoreNames.contains(e)){const n=s.createObjectStore(e,t);if(r)for(const e of r)n.createIndex(e.name,e.keyPath,e.options)}}]),new c(this,e,e)}deleteObjectStore(e){return this.upgReqs.push([e,"delete",t=>{t.deleteObjectStore(e)}]),this.commit()}requestToCommit(e){(async()=>{e&&this.reqs.push(e),this.commitRequested||(this.commitRequested=!0,await Promise.resolve(),this.commitRequested=!1,await this.commit())})().catch((e=>{this.latestError=e}))}async commit(){this.upgReqs.length&&await this.open((async e=>{let t=!1;const r=e.objectStoreNames;for(const[e,s]of this.upgReqs)"create"!==s||r.contains(e)?"delete"===s&&r.contains(e)&&(t=!0):t=!0;t?this.version=e.version+1:(this.upgReqs.length=0,await this.execReqs(e))})),this.reqs.length&&await this.open((e=>this.execReqs(e)),this.upgReqs.length?e=>{for(const[,,t]of this.upgReqs)t(e);this.upgReqs.length=0}:null)}execReqs(e){const t=[...this.reqs.reduce(((e,[t])=>e.add(t)),new Set)],r=this.reqs.every((([,e])=>"readonly"===e))?"readonly":"readwrite";return this.transaction(e,t,r,(e=>{for(const[,,t]of this.reqs)t(e);this.reqs.length=0}))}deleteDatabase(){return n(indexedDB.deleteDatabase(this.name))}}class i{db;storeName;name;constructor(e,t,r){this.db=e,this.storeName=t,this.name=r}register(e,t){return new Promise(((r,s)=>{this.db.requestToCommit([this.storeName,e,e=>{try{r(t(this.getTarget(e)))}catch(e){s(e)}}])}))}registerQuery(e,t){return this.register(e,(e=>n(t(e))))}async*registerCursor(e,t){yield*await this.register(e,(e=>async function*(e){for(let t;t=await n(e);)yield t}(t(e))))}count(e){return this.registerQuery("readonly",(t=>t.count(e)))}get(e){return this.registerQuery("readonly",(t=>t.get(e)))}getAll(e,t){return this.registerQuery("readonly",(r=>r.getAll(e,t)))}getAllKeys(e,t){return this.registerQuery("readonly",(r=>r.getAllKeys(e,t)))}getKey(e){return this.registerQuery("readonly",(t=>t.getKey(e)))}openCursor(e,t){return this.registerCursor("readwrite",(r=>r.openCursor(e,t)))}openKeyCursor(e,t){return this.registerCursor("readwrite",(r=>r.openKeyCursor(e,t)))}}class a extends i{getTarget(e){return e.objectStore(this.storeName).index(this.name)}}class c extends i{getTarget(e){return e.objectStore(this.storeName)}add(e,t){return this.registerQuery("readwrite",(r=>r.add(e,t)))}clear(){return this.registerQuery("readwrite",(e=>e.clear()))}delete(e){return this.registerQuery("readwrite",(t=>t.delete(e)))}index(e){return new a(this.db,this.name,e)}put(e,t){return this.registerQuery("readwrite",(r=>r.put(e,t)))}}function u(e){return new o(e)}const h={open:u};var d=t.aZ,l=t.OP,g=t.Fj,m=t.Ay,y=t.ho,p=t.rE;export{d as Idb,l as IdbIndex,g as IdbStore,m as default,y as open,p as version};